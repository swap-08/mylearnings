SQL> select * from Marks;

    STUDNO    MODULE1    MODULE2    MODULE3    MODULE4
---------- ---------- ---------- ---------- ----------
      1001         75         60         90         85
      1002         65         86         79         92
      1003         54         46         72         67
      1004         72         66                    89
      1005         62         56         72         86
      1006         80         50         70         30

6 rows selected.




SQL> select * from Student;

    STUDNO STUDNAME                  PHONE ADDRESS                  DEPTNO
---------- -------------------- ---------- -------------------- ----------
      1001 Rahul                   2456789 Mumbai                       10
      1002 Sanjay                  2678923 Pune                         20
      1003 Ritish                  2676763 Mumbai                       30
      1004 Sai                     2565758 Bangalore                    10
      1005 Ravi                    2787975 Chennai                      20
      1006 Kalai                   2345678 Chennai                      30
      1007 Sonal                   2987654 Mumbai                       20

7 rows selected.

-------------------------------------------------------------------------------------------------------------------

QUERY1:


SELECT	s.studname,s.studno,s.phone,s.deptno,m.module1,m.module2,m.module3,m.module4
FROM	student s,marks m
WHERE	s.studno=m.studno
AND	m.module1 IS NULL 
OR 	m.module1 IS NULL  
OR 	m.module2 IS NULL  
OR 	m.module3 IS NULL  
OR 	m.module4 IS NULL;

 

------------------------------------------------------------------------------------------------------------------
QUERY2:

SELECT	s.deptno,
	AVG(m.module1+m.module2+m.module3+m.module4) AS "AVGERAGE"
FROM	student s,marks m
WHERE	s.studno=m.studno
GROUP BY S.DEPTNO
ORDER BY AVG(m.module1+m.module2+m.module3+m.module4) DESC
AND ROWNUM>2;

----------------------------------------------------------------------------------------------------------------
QUERY3:

SELECT	deptno,
	MAX(COUNT(deptno))
FROM	Student
GROUP BY deptno;





-----------------------------------------------------------------------------------------------------------------

QUERY4:

--WRITE A PROCEDURE TO DISPLAY PASS/FAIL STATUS FOR EVERY STUDENT.PASSING CRITERIA IS 50



CREATE OR REPLACE PROCEDURE STUDENT_MARKS1(PASSING IN NUMBER)		--PROCEDURE CREATION
AS
cursor cname is								--CURSOR CREATION
SELECT	STUDNO,MODULE1,MODULE2,MODULE3,MODULE4
FROM	MARKS;

AVERAGE number;
begin
	for rdept in cname						--FOR LOOP FOR GETTING ALL RECORDS
	loop
		AVERAGE:=(rdept.MODULE1+rdept.MODULE2+rdept.MODULE3+rdept.MODULE4)/4;	--CALCULATING AVERAGE OF ALL MODULE MARKS

		dbms_output.put_line(rdept.STUDNO);

		if(AVERAGE>=PASSING) then						--IF CONDITION FOR CHECKING PASS OR FAIL
		begin
		dbms_output.put_line('AVERAGE'||AVERAGE||' '||'PASS');
		end;

		else
		begin
		dbms_output.put_line('FAIL');
		end;
		end if;
	end loop;									--END OF LOOP

EXCEPTION										--EXCEPTION

WHEN NO_DATE_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NO DATA AVAILABLE');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('EXCEPTION IN CODE');
end;
/



--CALLING PROCEDURE

DECLARE
PASSING NUMBER;

BEGIN
PASSING:=50;				--DECLARATION OF PASSING CRITERIA
STUDENT_MARKS1(PASSING);		--PASSING CRITERIA AS A PARAMETER TO PROCEDURE STUDENT_MARKS1
END;
/



-----------------------------------------------------------------------------------------------------------------

SQL> CREATE OR REPLACE PROCEDURE STUDENT_MARKS1(PASSING IN NUMBER)
  2  AS
  3  cursor cname is
  4  SELECT STUDNO,MODULE1,MODULE2,MODULE3,MODULE4
  5  FROM MARKS;
  6  
  7  AVERAGE number;
  8  begin
  9   for rdept in cname
 10   loop
 11    AVERAGE:=(rdept.MODULE1+rdept.MODULE2+rdept.MODULE3+rdept.MODULE4)/4;
 12    dbms_output.put_line(rdept.STUDNO);
 13    if(AVERAGE>=PASSING) then
 14    begin
 15    dbms_output.put_line('AVERAGE'||AVERAGE||' '||'PASS');
 16    end;
 17    else
 18    begin
 19    dbms_output.put_line('FAIL');
 20    end;
 21    end if;
 22   end loop;
 23  EXCEPTION
 24  WHEN ZERO_DIVIDE THEN
 25  DBMS_OUTPUT.PUT_LINE('PLEASE ENTER VALID DENOMINATOR');
 26  WHEN OTHERS THEN
 27  DBMS_OUTPUT.PUT_LINE('EXCEPTION IN CODE');
 28  end;
 29  /

Procedure created.

SQL> DECLARE
  2  PASSING NUMBER;
  3  BEGIN
  4  PASSING:=50;
  5  STUDENT_MARKS1(PASSING);
  6  END;
  7  /
1001
AVERAGE77.5 PASS
1002
AVERAGE80.5 PASS
1003
AVERAGE59.75 PASS
1004
FAIL
1005
AVERAGE69 PASS
1006
AVERAGE57.5 PASS

PL/SQL procedure successfully completed.

-----------------------------------------------------------------------------------------------------------------
